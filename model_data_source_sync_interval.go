/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0-Docker-3.3.0 (4.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// DataSourceSyncInterval * `1` - Minutely * `60` - Hourly * `720` - 12 hours * `1440` - Daily * `10080` - Weekly * `43200` - 30 days
type DataSourceSyncInterval int32

// List of DataSource_sync_interval
const (
	DATASOURCESYNCINTERVAL__1     DataSourceSyncInterval = 1
	DATASOURCESYNCINTERVAL__60    DataSourceSyncInterval = 60
	DATASOURCESYNCINTERVAL__720   DataSourceSyncInterval = 720
	DATASOURCESYNCINTERVAL__1440  DataSourceSyncInterval = 1440
	DATASOURCESYNCINTERVAL__10080 DataSourceSyncInterval = 10080
	DATASOURCESYNCINTERVAL__43200 DataSourceSyncInterval = 43200
)

// All allowed values of DataSourceSyncInterval enum
var AllowedDataSourceSyncIntervalEnumValues = []DataSourceSyncInterval{
	1,
	60,
	720,
	1440,
	10080,
	43200,
}

func (v *DataSourceSyncInterval) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataSourceSyncInterval(value)
	for _, existing := range AllowedDataSourceSyncIntervalEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataSourceSyncInterval", value)
}

// NewDataSourceSyncIntervalFromValue returns a pointer to a valid DataSourceSyncInterval
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataSourceSyncIntervalFromValue(v int32) (*DataSourceSyncInterval, error) {
	ev := DataSourceSyncInterval(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataSourceSyncInterval: valid values are %v", v, AllowedDataSourceSyncIntervalEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataSourceSyncInterval) IsValid() bool {
	for _, existing := range AllowedDataSourceSyncIntervalEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataSource_sync_interval value
func (v DataSourceSyncInterval) Ptr() *DataSourceSyncInterval {
	return &v
}

type NullableDataSourceSyncInterval struct {
	value *DataSourceSyncInterval
	isSet bool
}

func (v NullableDataSourceSyncInterval) Get() *DataSourceSyncInterval {
	return v.value
}

func (v *NullableDataSourceSyncInterval) Set(val *DataSourceSyncInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSourceSyncInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourceSyncInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourceSyncInterval(val *DataSourceSyncInterval) *NullableDataSourceSyncInterval {
	return &NullableDataSourceSyncInterval{value: val, isSet: true}
}

func (v NullableDataSourceSyncInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourceSyncInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
