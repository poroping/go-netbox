/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0-Docker-3.3.0 (4.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// PowerOutletStatusLabel the model 'PowerOutletStatusLabel'
type PowerOutletStatusLabel string

// List of PowerOutlet_status_label
const (
	POWEROUTLETSTATUSLABEL_ENABLED  PowerOutletStatusLabel = "Enabled"
	POWEROUTLETSTATUSLABEL_DISABLED PowerOutletStatusLabel = "Disabled"
	POWEROUTLETSTATUSLABEL_FAULTY   PowerOutletStatusLabel = "Faulty"
)

// All allowed values of PowerOutletStatusLabel enum
var AllowedPowerOutletStatusLabelEnumValues = []PowerOutletStatusLabel{
	"Enabled",
	"Disabled",
	"Faulty",
}

func (v *PowerOutletStatusLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PowerOutletStatusLabel(value)
	for _, existing := range AllowedPowerOutletStatusLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PowerOutletStatusLabel", value)
}

// NewPowerOutletStatusLabelFromValue returns a pointer to a valid PowerOutletStatusLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPowerOutletStatusLabelFromValue(v string) (*PowerOutletStatusLabel, error) {
	ev := PowerOutletStatusLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PowerOutletStatusLabel: valid values are %v", v, AllowedPowerOutletStatusLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PowerOutletStatusLabel) IsValid() bool {
	for _, existing := range AllowedPowerOutletStatusLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PowerOutlet_status_label value
func (v PowerOutletStatusLabel) Ptr() *PowerOutletStatusLabel {
	return &v
}

type NullablePowerOutletStatusLabel struct {
	value *PowerOutletStatusLabel
	isSet bool
}

func (v NullablePowerOutletStatusLabel) Get() *PowerOutletStatusLabel {
	return v.value
}

func (v *NullablePowerOutletStatusLabel) Set(val *PowerOutletStatusLabel) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerOutletStatusLabel) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerOutletStatusLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerOutletStatusLabel(val *PowerOutletStatusLabel) *NullablePowerOutletStatusLabel {
	return &NullablePowerOutletStatusLabel{value: val, isSet: true}
}

func (v NullablePowerOutletStatusLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerOutletStatusLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
