/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0-Docker-3.3.0 (4.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// L2VPNStatusValue * `active` - Active * `planned` - Planned * `decommissioning` - Decommissioning
type L2VPNStatusValue string

// List of L2VPN_status_value
const (
	L2VPNSTATUSVALUE_ACTIVE          L2VPNStatusValue = "active"
	L2VPNSTATUSVALUE_PLANNED         L2VPNStatusValue = "planned"
	L2VPNSTATUSVALUE_DECOMMISSIONING L2VPNStatusValue = "decommissioning"
)

// All allowed values of L2VPNStatusValue enum
var AllowedL2VPNStatusValueEnumValues = []L2VPNStatusValue{
	"active",
	"planned",
	"decommissioning",
}

func (v *L2VPNStatusValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := L2VPNStatusValue(value)
	for _, existing := range AllowedL2VPNStatusValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid L2VPNStatusValue", value)
}

// NewL2VPNStatusValueFromValue returns a pointer to a valid L2VPNStatusValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewL2VPNStatusValueFromValue(v string) (*L2VPNStatusValue, error) {
	ev := L2VPNStatusValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for L2VPNStatusValue: valid values are %v", v, AllowedL2VPNStatusValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v L2VPNStatusValue) IsValid() bool {
	for _, existing := range AllowedL2VPNStatusValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to L2VPN_status_value value
func (v L2VPNStatusValue) Ptr() *L2VPNStatusValue {
	return &v
}

type NullableL2VPNStatusValue struct {
	value *L2VPNStatusValue
	isSet bool
}

func (v NullableL2VPNStatusValue) Get() *L2VPNStatusValue {
	return v.value
}

func (v *NullableL2VPNStatusValue) Set(val *L2VPNStatusValue) {
	v.value = val
	v.isSet = true
}

func (v NullableL2VPNStatusValue) IsSet() bool {
	return v.isSet
}

func (v *NullableL2VPNStatusValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableL2VPNStatusValue(val *L2VPNStatusValue) *NullableL2VPNStatusValue {
	return &NullableL2VPNStatusValue{value: val, isSet: true}
}

func (v NullableL2VPNStatusValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableL2VPNStatusValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
