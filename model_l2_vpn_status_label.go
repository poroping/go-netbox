/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0-Docker-3.3.0 (4.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// L2VPNStatusLabel the model 'L2VPNStatusLabel'
type L2VPNStatusLabel string

// List of L2VPN_status_label
const (
	L2VPNSTATUSLABEL_ACTIVE          L2VPNStatusLabel = "Active"
	L2VPNSTATUSLABEL_PLANNED         L2VPNStatusLabel = "Planned"
	L2VPNSTATUSLABEL_DECOMMISSIONING L2VPNStatusLabel = "Decommissioning"
)

// All allowed values of L2VPNStatusLabel enum
var AllowedL2VPNStatusLabelEnumValues = []L2VPNStatusLabel{
	"Active",
	"Planned",
	"Decommissioning",
}

func (v *L2VPNStatusLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := L2VPNStatusLabel(value)
	for _, existing := range AllowedL2VPNStatusLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid L2VPNStatusLabel", value)
}

// NewL2VPNStatusLabelFromValue returns a pointer to a valid L2VPNStatusLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewL2VPNStatusLabelFromValue(v string) (*L2VPNStatusLabel, error) {
	ev := L2VPNStatusLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for L2VPNStatusLabel: valid values are %v", v, AllowedL2VPNStatusLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v L2VPNStatusLabel) IsValid() bool {
	for _, existing := range AllowedL2VPNStatusLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to L2VPN_status_label value
func (v L2VPNStatusLabel) Ptr() *L2VPNStatusLabel {
	return &v
}

type NullableL2VPNStatusLabel struct {
	value *L2VPNStatusLabel
	isSet bool
}

func (v NullableL2VPNStatusLabel) Get() *L2VPNStatusLabel {
	return v.value
}

func (v *NullableL2VPNStatusLabel) Set(val *L2VPNStatusLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableL2VPNStatusLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableL2VPNStatusLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableL2VPNStatusLabel(val *L2VPNStatusLabel) *NullableL2VPNStatusLabel {
	return &NullableL2VPNStatusLabel{value: val, isSet: true}
}

func (v NullableL2VPNStatusLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableL2VPNStatusLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
