/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0-Docker-3.3.0 (4.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// PatchedWritablePowerOutletRequestStatus * `enabled` - Enabled * `disabled` - Disabled * `faulty` - Faulty
type PatchedWritablePowerOutletRequestStatus string

// List of PatchedWritablePowerOutletRequest_status
const (
	PATCHEDWRITABLEPOWEROUTLETREQUESTSTATUS_ENABLED  PatchedWritablePowerOutletRequestStatus = "enabled"
	PATCHEDWRITABLEPOWEROUTLETREQUESTSTATUS_DISABLED PatchedWritablePowerOutletRequestStatus = "disabled"
	PATCHEDWRITABLEPOWEROUTLETREQUESTSTATUS_FAULTY   PatchedWritablePowerOutletRequestStatus = "faulty"
)

// All allowed values of PatchedWritablePowerOutletRequestStatus enum
var AllowedPatchedWritablePowerOutletRequestStatusEnumValues = []PatchedWritablePowerOutletRequestStatus{
	"enabled",
	"disabled",
	"faulty",
}

func (v *PatchedWritablePowerOutletRequestStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PatchedWritablePowerOutletRequestStatus(value)
	for _, existing := range AllowedPatchedWritablePowerOutletRequestStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PatchedWritablePowerOutletRequestStatus", value)
}

// NewPatchedWritablePowerOutletRequestStatusFromValue returns a pointer to a valid PatchedWritablePowerOutletRequestStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPatchedWritablePowerOutletRequestStatusFromValue(v string) (*PatchedWritablePowerOutletRequestStatus, error) {
	ev := PatchedWritablePowerOutletRequestStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PatchedWritablePowerOutletRequestStatus: valid values are %v", v, AllowedPatchedWritablePowerOutletRequestStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PatchedWritablePowerOutletRequestStatus) IsValid() bool {
	for _, existing := range AllowedPatchedWritablePowerOutletRequestStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PatchedWritablePowerOutletRequest_status value
func (v PatchedWritablePowerOutletRequestStatus) Ptr() *PatchedWritablePowerOutletRequestStatus {
	return &v
}

type NullablePatchedWritablePowerOutletRequestStatus struct {
	value *PatchedWritablePowerOutletRequestStatus
	isSet bool
}

func (v NullablePatchedWritablePowerOutletRequestStatus) Get() *PatchedWritablePowerOutletRequestStatus {
	return v.value
}

func (v *NullablePatchedWritablePowerOutletRequestStatus) Set(val *PatchedWritablePowerOutletRequestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedWritablePowerOutletRequestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedWritablePowerOutletRequestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedWritablePowerOutletRequestStatus(val *PatchedWritablePowerOutletRequestStatus) *NullablePatchedWritablePowerOutletRequestStatus {
	return &NullablePatchedWritablePowerOutletRequestStatus{value: val, isSet: true}
}

func (v NullablePatchedWritablePowerOutletRequestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedWritablePowerOutletRequestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
